import{_ as s,o as i,c as n,a5 as t}from"./chunks/framework.CUyCJeCc.js";const g=JSON.parse('{"title":"使用Nginx统一前后端域名","description":"","frontmatter":{"title":"使用Nginx统一前后端域名","published":"2024-06-15T00:00:00.000Z","description":"","image":"","tags":["Nginx","Springboot","Vue"],"category":"前后端开发","draft":false},"headers":[],"relativePath":"使用Nginx统一前后端域名.md","filePath":"使用Nginx统一前后端域名.md","lastUpdated":null}'),e={name:"使用Nginx统一前后端域名.md"};function p(l,a,h,r,o,c){return i(),n("div",{"data-pagefind-body":!0},a[0]||(a[0]=[t(`<h1 id="使用nginx统一前后端域名" tabindex="-1">使用Nginx统一前后端域名 <a class="header-anchor" href="#使用nginx统一前后端域名" aria-label="Permalink to &quot;使用Nginx统一前后端域名&quot;">​</a></h1><p>​ 前后端无疑是现流行的开发框架模式，出于网络安全，流行浏览器都添加了跨域访问限制，在未预处理的情况下，当访问的Web站点内出现和其他域名或其他端口的HTTP通信便会拦截并警告跨域。</p><p>​ 本博客之前写过一篇关于Java语言的SpringBoot框架以及SpringSecurity的跨域处理。但是这些步骤过于复杂，而且生产环境和开发环境每次需要重新配置，非常不方便。那么有没有一种船新的方式从根源上解决这一问题呢?答案是有！</p><p>​ Nginx是一个轻量Web服务器，它允许你在一台服务器上允许多个域名的多个Web服务，当然，这也包括一项重要的功能——转发！</p><p>​ 跨域是因访问不同域名或不同端口的Http通信条件下触发的，从根源上解决这一问题，我直接让它们都访问同一域名同一端口不就好了！可是正常人都能知道两个服务怎么可能同时占用一个端口呢？这肯定不现实！当然我们肯定不是这么解决的，请看Nginx介入的方案：</p><p>​ 首先，环境如下:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>假设我们环境为abc为站点域名 该域名解析至我们的服务器IP 假设为189.189.189.1 </span></span>
<span class="line"><span>前端跑在SSL 443服务 后端跑在服务器8001端口</span></span>
<span class="line"><span>前端 Nginx abc.com:443</span></span>
<span class="line"><span>后端 Java 189.189.189.1:8001</span></span></code></pre></div><p>​ 我们的解决思路为：</p><ol><li>用户访问443端口，打开登陆页面，向abc.com/api/auth/login发送登录的Post请求</li><li>Nginx拦截了/api/路径下的所有请求，重定向到localhost:8001，而不是交给443的前端服务处理(那肯定是报403的)</li><li>跑在8001端口的Java程序接收到了Nginx转发过来的Post请求，处理后将结果返回，由Nginx交还给客户</li></ol><p>​ 好了，接下来上配置文件，首先你要把前端跑在Nginx上，不做演示，打开配置文件，根据需求添加如下字段:</p><h3 id="第一种" tabindex="-1"><strong>第一种</strong> <a class="header-anchor" href="#第一种" aria-label="Permalink to &quot;**第一种**&quot;">​</a></h3><p>代理至地址，proxy_pass 后面没有 “ / ”</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://localhost:8001;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li>访问：<a href="http://abc.com/api/xxx" target="_blank" rel="noreferrer">http://abc.com/api/xxx</a></li><li>转至：<a href="http://abc.com:9898/xxx" target="_blank" rel="noreferrer">http://abc.com:9898/xxx</a></li></ol><h3 id="第二种" tabindex="-1"><strong>第二种</strong> <a class="header-anchor" href="#第二种" aria-label="Permalink to &quot;**第二种**&quot;">​</a></h3><p>代理至地址，proxy_pass 后面有 “ / ”</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://localhost:8001/;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li>访问：<a href="http://abc.com/api/xxx" target="_blank" rel="noreferrer">http://abc.com/api/xxx</a></li><li>转至：<a href="http://abc.com:9898/api/xxx" target="_blank" rel="noreferrer">http://abc.com:9898/api/xxx</a></li></ol><h3 id="第三种" tabindex="-1"><strong>第三种</strong> <a class="header-anchor" href="#第三种" aria-label="Permalink to &quot;**第三种**&quot;">​</a></h3><p>代理本地静态页面</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /page </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    alias </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  /usr/share/nginx/html/page/;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index.html index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一般来说第一种和第二种就可以解决这个问题了。</p>`,22)]))}const k=s(e,[["render",p]]);export{g as __pageData,k as default};
