import{_ as i,o as a,c as n,a5 as t}from"./chunks/framework.CUyCJeCc.js";const E=JSON.parse('{"title":"部署前后端项目至Nginx服务器配置事项","description":"","frontmatter":{"title":"部署前后端项目至Nginx服务器配置事项","published":"2023-11-08T20:00:00.000Z","description":"","image":"","tags":["Nginx","Springboot","Vue"],"category":"前后端开发","draft":false},"headers":[],"relativePath":"Nginx/UploadProjectToNginx.md","filePath":"Nginx/UploadProjectToNginx.md","lastUpdated":null}'),l={name:"Nginx/UploadProjectToNginx.md"};function h(p,s,e,k,r,d){return a(),n("div",{"data-pagefind-body":!0},s[0]||(s[0]=[t(`<h1 id="部署前后端项目至nginx服务器配置事项" tabindex="-1">部署前后端项目至Nginx服务器配置事项 <a class="header-anchor" href="#部署前后端项目至nginx服务器配置事项" aria-label="Permalink to &quot;部署前后端项目至Nginx服务器配置事项&quot;">​</a></h1><h2 id="_1-跨域处理" tabindex="-1">1.跨域处理 <a class="header-anchor" href="#_1-跨域处理" aria-label="Permalink to &quot;1.跨域处理&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">情景</p><p>出于网络安全，浏览器自带有跨域访问请求保护。在开发环境下我们在前后端配置了跨域处理。前端实际仅配置了请求地址，后端需要在CorsConfig跨域配置类中为请求源添加认证。</p></div><h4 id="_1-前端axios默认请求地址修改" tabindex="-1">(1)前端axios默认请求地址修改 <a class="header-anchor" href="#_1-前端axios默认请求地址修改" aria-label="Permalink to &quot;(1)前端axios默认请求地址修改&quot;">​</a></h4><p>默认开发环境下配置:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.defaults.baseURL = &#39;http://localhost:8080&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.config.globalProperties.$axios = axios</span></span></code></pre></div><p>部署配置:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>axios.defaults.baseURL = &#39;后端部署的地址,如http://175.24.164.23:8080&#39;</span></span>
<span class="line"><span>app.config.globalProperties.$axios = axios</span></span></code></pre></div><h4 id="_2-后端跨域请求处理地址修改" tabindex="-1">(2)后端跨域请求处理地址修改 <a class="header-anchor" href="#_2-后端跨域请求处理地址修改" aria-label="Permalink to &quot;(2)后端跨域请求处理地址修改&quot;">​</a></h4><p>添加前端部署的HTTP地址</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CorsConfigurationSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">corsConfigurationSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CorsConfiguration cors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CorsConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAllowedOriginPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://175.24.164.155&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAllowedOriginPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.iloveu1314.xyz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAllowedOriginPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:5173&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAllowCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAllowedHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAllowedMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addExposedHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UrlBasedCorsConfigurationSource source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UrlBasedCorsConfigurationSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerCorsConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cors);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h2 id="_2-服务端nginx伪静态" tabindex="-1">2.服务端Nginx伪静态 <a class="header-anchor" href="#_2-服务端nginx伪静态" aria-label="Permalink to &quot;2.服务端Nginx伪静态&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">情景</p><p>因为我们开发的Vue是单页模式应用，从头至尾都停留在index.html上通过js实现内容变换。而nginx默认配置会寻找对应路由路径的html文件，故在不进行配置修改的情况下会报404。</p></div><p>只需要在root节点后部署拦截重定向：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ @router;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #需要指向下面的@router否则会出现vue的路由在nginx中刷新出现404</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index.html index.htm;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	#对应上面的@router，主要原因是路由的路径资源并不是一个真实的路径，所以无法找到具体的文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #因此需要rewrite到index.html中，然后交给路由在处理请求资源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @router </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            rewrite</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> ^.*$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /index.html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/www/wwwroot/znzy/front/dist/;       </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.html index.htm;        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ /index.html; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div>`,16)]))}const g=i(l,[["render",h]]);export{E as __pageData,g as default};
