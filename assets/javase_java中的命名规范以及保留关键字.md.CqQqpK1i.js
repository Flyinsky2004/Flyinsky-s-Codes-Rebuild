import{_ as i,o as s,c as e,a5 as l}from"./chunks/framework.CUyCJeCc.js";const k=JSON.parse('{"title":"Java中的命名规范以及保留关键字","description":"","frontmatter":{"title":"Java中的命名规范以及保留关键字","published":"2024-09-23T00:00:00.000Z","description":"","image":"","tags":["JavaSE"],"category":"JavaSE","draft":false},"headers":[],"relativePath":"javase/java中的命名规范以及保留关键字.md","filePath":"javase/java中的命名规范以及保留关键字.md","lastUpdated":null}'),t={name:"javase/java中的命名规范以及保留关键字.md"};function n(o,a,r,d,h,c){return s(),e("div",{"data-pagefind-body":!0},a[0]||(a[0]=[l(`<h1 id="java中的命名规范以及保留关键字" tabindex="-1">Java中的命名规范以及保留关键字 <a class="header-anchor" href="#java中的命名规范以及保留关键字" aria-label="Permalink to &quot;Java中的命名规范以及保留关键字&quot;">​</a></h1><ul><li><a href="#Java中的命名规范">Java中的命名规范</a></li><li><a href="#保留关键字">保留关键字</a></li></ul><h2 id="java中的命名规范" tabindex="-1">Java中的命名规范 <a class="header-anchor" href="#java中的命名规范" aria-label="Permalink to &quot;Java中的命名规范&quot;">​</a></h2><h3 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h3><ol><li><strong>类名</strong>： <ul><li>使用大驼峰命名法（PascalCase），即每个单词的首字母大写。</li><li>示例：<code>Customer</code>, <code>EmployeeDetails</code>, <code>AccountManager</code>.</li></ul></li><li><strong>接口名</strong>： <ul><li>类似于类名，使用大驼峰命名法。</li><li>通常描述一种能力或行为。</li><li>示例：<code>Runnable</code>, <code>Serializable</code>, <code>Comparable</code>.</li></ul></li><li><strong>方法名</strong>： <ul><li>使用小驼峰命名法（camelCase），即第一个单词首字母小写，后续单词首字母大写。</li><li>示例：<code>calculateTotal</code>, <code>getCustomerName</code>, <code>processOrder</code>.</li></ul></li><li><strong>变量名</strong>： <ul><li>使用小驼峰命名法。</li><li>应该简洁且具有描述性。</li><li>示例：<code>totalAmount</code>, <code>customerName</code>, <code>orderList</code>.</li></ul></li><li><strong>常量名</strong>： <ul><li>使用全大写字母，并用下划线分隔单词。</li><li>示例：<code>MAX_VALUE</code>, <code>DEFAULT_TIMEOUT</code>, <code>PI</code>.</li></ul></li><li><strong>包名</strong>： <ul><li>使用全小写字母，通常是公司域名的反写加上项目名或模块名。</li><li>示例：<code>com.example.project</code>, <code>org.company.module</code>.</li></ul></li><li><strong>枚举名</strong>： <ul><li>使用大驼峰命名法。</li><li>示例：<code>Day</code>, <code>Color</code>, <code>Direction</code>.</li></ul></li><li><strong>枚举常量</strong>： <ul><li>使用全大写字母，并用下划线分隔单词。</li><li>示例：<code>RED</code>, <code>GREEN</code>, <code>BLUE</code>.</li></ul></li></ol><h2 id="保留关键字" tabindex="-1">保留关键字 <a class="header-anchor" href="#保留关键字" aria-label="Permalink to &quot;保留关键字&quot;">​</a></h2><p>Java中有一组保留关键字，这些关键字不能用作标识符（例如变量名、方法名、类名等）。以下是Java的保留关键字列表：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    continue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          switch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assert      default     goto         package      synchronized</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     do          if           private      this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">break       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      implements   protected    throw</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        else        import       public       throws</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">case        enum        instanceof   return       transient</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">catch       extends     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        try</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        final       interface    static       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class       finally     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         strictfp     volatile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       native       super        while</span></span></code></pre></div>`,8)]))}const E=i(t,[["render",n]]);export{k as __pageData,E as default};
